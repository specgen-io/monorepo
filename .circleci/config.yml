version: 2.1

orbs:
  circleci: moda/circleci@0.4.0
  artifactory: moda/artifactory@0.2.0

parameters:
  specgen-version:
    type: string
    default: 2.0.<< pipeline.number >>
  test-branch:
    type: string
    default: main

jobs:
  build-specgen:
    docker:
      - image: cimg/go:1.16.4
    working_directory: ~/specgen
    steps:
      - checkout
      - run:
          name: Build
          command: ./build.sh << pipeline.parameters.specgen-version >>
      - run:
          name: Unit tests
          command: |
            mkdir -p /tmp/test-results
            go get -u github.com/jstemmer/go-junit-report
            go test ./... -v 2>&1 | go-junit-report > /tmp/test-results/go-test-report.xml
      - store_artifacts:
          path: ./zips
          destination: zips
      - store_artifacts:
          path: ./dist
          destination: specgen
      - store_artifacts:
          path: /tmp/test-results
          destination: go-test-report
      - store_test_results:
          path: /tmp/test-results
      - persist_to_workspace:
          root: .
          paths:
            - dist
      - run:
          name: Release
          command: |
            if [[ $CIRCLE_BRANCH == main ]] || [[ $CIRCLE_BRANCH == v* ]]; then
              ./release.sh << pipeline.parameters.specgen-version >> ${GITHUB_TOKEN}
            else
              echo "Will not release - not running on main or v* branch"
            fi

  build-gem-specgen:
    docker:
      - image: circleci/ruby:2.4.9
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/gem-specgen/lib
      - run:
          name: Check Base64
          command: echo -n '$RUBYGEMS_API_KEY' | base64
      - run:
          name: Build gem
          command: |
            cd ./plugins/gem-specgen
            export VERSION=<< pipeline.parameters.specgen-version >>
            gem build specgen.gemspec
      - setup-rubygems
      - run:
          name: Push gem
          command: |
            if [[ $CIRCLE_BRANCH == main ]] || [[ $CIRCLE_BRANCH == v* ]]; then
              cd ./plugins/gem-specgen
              export VERSION=<< pipeline.parameters.specgen-version >>
              gem push --key rubygems specgen-$VERSION.gem
            else
              echo "Will not release - not running on main branch"
            fi

  build-sbt-specgen:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/sbt-specgen/src/main/resources
      - restore_cache:
          key: cache-{{ checksum "./plugins/sbt-specgen/build.sbt" }}
      - artifactory/setup-sbt:
          jfrog-server-url: specgen.jfrog.io
          repo-name: sbt
      - run:
          name: Build SBT plugin
          command: |
            cd ./plugins/sbt-specgen
            sbt -Dversion=<< pipeline.parameters.specgen-version >> clean test
      - run:
          name: Publish SBT plugin
          command: |
            if [[ $CIRCLE_BRANCH == main ]] || [[ $CIRCLE_BRANCH == v* ]]; then
              cd ./plugins/sbt-specgen
              sbt -Dversion=<< pipeline.parameters.specgen-version >> publish
            else
              echo "Will not release - not running on main branch"
            fi
      - save_cache:
          key: cache-{{ checksum "./plugins/sbt-specgen/build.sbt" }}
          paths:
            - ~/.sbt
            - ~/.ivy2
            - ~/.m2

  build-sbt-specgen-sonatype:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/sbt-specgen/src/main/resources
      - restore_cache:
          key: cache-{{ checksum "./plugins/sbt-specgen/build.sbt" }}
      - setup-sonatype-sbt
      - run:
          name: Publish SBT plugin
          command: |
            cd ./plugins/sbt-specgen
            sbt -Dversion=<< pipeline.parameters.specgen-version >> publishSigned sonatypeRelease

  build-npm-specgen:
    docker:
      - image: cimg/node:14.15.1
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/npm-specgen
      - run:
          name: npm publish package
          command: |
            if [[ $CIRCLE_BRANCH == main ]] || [[ $CIRCLE_BRANCH == v* ]]; then
              cd ./plugins/npm-specgen
              npm version << pipeline.parameters.specgen-version >>
              npm install
              npm publish
            else
              echo "Will not release - not running on main branch"
            fi

  build-maven-specgen:
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/npm-specgen
      - setup-artifactory-maven:
          jfrog-server-url: specgen.jfrog.io
          repo-name: maven
      - run:
          name: Build Maven plugin
          command: |
            cd ./plugins/maven-specgen
            mvn clean install
      - run:
          name: Publish SBT plugin
          command: |
            mvn deploy -Dproject.version=0.0.6 -Dartifactory=true
            if [[ $CIRCLE_BRANCH == main ]] || [[ $CIRCLE_BRANCH == v* ]]; then
              cd ./plugins/maven-specgen
              mvn deploy -Dproject.version=0.0.6 -Dartifactory=true
            else
              echo "Will not release - not running on main branch"
            fi

  build-complete:
    docker:
      - image: cimg/base:2021.04
    steps:
      - run: echo "Build is complete!!!"

commands:
  setup-sonatype-sbt:
    steps:
      - run:
          name: Setup Sonatype for SBT
          command: |
            mkdir -p ~/.sbt/1.0
            tee > ~/.sbt/1.0/sonatype.sbt \<<END
            credentials += Credentials("Sonatype Nexus Repository Manager", "oss.sonatype.org", "$SONATYPE_USER", "$SONATYPE_PASSWORD")
            publishTo := Some(Opts.resolver.sonatypeStaging)
            pgpPassphrase := Some("$SONATYPE_GPG_PASSPHRASE".toArray)
            END
      - run:
          name: Add sontype plugins
          command: |
            tee > ~/.sbt/1.0/scala_jfrog.sbt \<<END
            val scala_jfrog = "Scala JFrog" at "https://scala.jfrog.io/artifactory/sbt-plugin-releases"
            resolvers += scala_jfrog
            END
            mkdir -p ~/.sbt/1.0/plugins
            tee > ~/.sbt/1.0/plugins/sonatype.sbt \<<END
            addSbtPlugin("org.xerial.sbt" % "sbt-sonatype" % "2.3")
            addSbtPlugin("com.jsuereth" % "sbt-pgp" % "1.1.1")
            END
      - run:
          name: Write PGP secret key
          command: |
            mkdir -p ~/.sbt/gpg
            (echo "$SONATYPE_GPG_SECRET_KEY" | base64 -d) > ~/.sbt/gpg/secring.asc
  setup-artifactory-maven:
    parameters:
      jfrog-server-url:
        type: string
      repo-name:
        type: string
    steps:
      - run:
          name: Setup Artifactory for SBT
          command: |
            mkdir -p ~/.sbt/1.0
            tee > ~/.m2/settings.xml \<<END
            <?xml version="1.0" encoding="UTF-8"?>
            <settings xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.2.0 http://maven.apache.org/xsd/settings-1.2.0.xsd" xmlns="http://maven.apache.org/SETTINGS/1.2.0"
            xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
              <servers>
                <server>
                  <id>artifactory</id>
                  <username>$JFROG_USER</username>
                  <password>$JFROG_PASS</password>
                </server>
              </servers>
            </settings>
            END
  setup-rubygems:
    steps:
      - run:
          name: Write key
          command: |
            mkdir ~/.gem
            tee > ~/.gem/credentials \<<END
            ---
            :rubygems_api_key: $RUBYGEMS_API_KEY
            END
            chmod 600 ~/.gem/credentials

workflows:
  build-release:
    jobs:
      - build-specgen:
          context: specgen
      - build-gem-specgen:
          context: specgen
          requires:
            - build-specgen
      - build-sbt-specgen:
          context: specgen
          requires:
            - build-specgen
      - build-maven-specgen:
          context: specgen
          requires:
            - build-specgen
      - build-npm-specgen:
          context: specgen
          requires:
            - build-specgen
      - build-complete:
          requires:
            - build-sbt-specgen
            - build-gem-specgen
            - build-npm-specgen
      - circleci/start-pipeline:
          name: test-models
          repository: specgen-io/test-models
          branch: << pipeline.parameters.test-branch >>
          pipeline-parameters: '{"specgen-version": "<< pipeline.parameters.specgen-version >>"}'
          context: specgen
          requires:
            - build-complete
          filters:
            branches:
              only:
                - main
                - /v.*/
      - circleci/start-pipeline:
          name: test-clients
          repository: specgen-io/test-clients
          branch: << pipeline.parameters.test-branch >>
          pipeline-parameters: '{"specgen-version": "<< pipeline.parameters.specgen-version >>"}'
          context: specgen
          requires:
            - build-complete
          filters:
            branches:
              only:
                - main
                - /v.*/
      - circleci/start-pipeline:
          name: test-services
          repository: specgen-io/test-services
          branch: << pipeline.parameters.test-branch >>
          pipeline-parameters: '{"specgen-version": "<< pipeline.parameters.specgen-version >>"}'
          context: specgen
          requires:
            - build-complete
          filters:
            branches:
              only:
                - main
                - /v.*/
      - approve-sonatype:
          type: approval
          requires:
            - build-sbt-specgen
      - build-sbt-specgen-sonatype:
          context: specgen
          requires:
            - approve-sonatype
