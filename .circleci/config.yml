version: 2.1

orbs:
  tools: moda/tools@0.15.0

common-params: &common-params
  version: 0.<< pipeline.number >>.0

jobs:
  build-specgen:
    parameters:
      version:
        type: string
    docker:
      - image: circleci/golang:1.12
    working_directory: /go/src/specgen
    steps:
      - checkout
      - run:
          name: Build
          command: |
            export VERSION=<< parameters.version >>
            ./build.sh $VERSION
      - run:
          name: Unit tests
          command: |
            mkdir -p /tmp/test-results
            go get -u github.com/jstemmer/go-junit-report
            go test ./... -v 2>&1 | ../../bin/go-junit-report > /tmp/test-results/go-test-report.xml
      - store_artifacts:
          path: ./zips
          destination: zips
      - store_artifacts:
          path: ./dist
          destination: specgen
      - store_artifacts:
          path: /tmp/test-results
          destination: go-test-report
      - store_test_results:
          path: /tmp/test-results
      - persist_to_workspace:
          root: .
          paths:
            - dist
      - run:
          name: Release
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              export VERSION=<< parameters.version >>
              ./release.sh $VERSION ${GITHUB_TOKEN}
            else
              echo "Will not release - not running on master branch"
            fi

  build-gem-specgen:
    parameters:
      version:
        type: string
    docker:
      - image: circleci/ruby:2.4.9
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/gem-specgen/lib
      - run:
          name: Check Base64
          command: echo -n '$RUBYGEMS_API_KEY' | base64
      - run:
          name: Build gem
          command: |
            cd ./plugins/gem-specgen
            export VERSION=<< parameters.version >>
            gem build specgen.gemspec
      - setup-rubygems_key
      - run:
          name: Push gem
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              cd ./plugins/gem-specgen
              export VERSION=<< parameters.version >>
              gem push --key rubygems specgen-$VERSION.gem
            else
              echo "Will not release - not running on master branch"
            fi

  build-sbt-specgen:
    parameters:
      version:
        type: string
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/sbt-specgen/src/main/resources
      - restore_cache:
          key: cache-{{ checksum "./plugins/sbt-specgen/build.sbt" }}
      - setup-artifactory-sbt
      - run:
          name: Build SBT plugin
          command: |
            cd ./plugins/sbt-specgen
            export VERSION=<< parameters.version >>
            sbt -Dversion=$VERSION clean test
      - run:
          name: Publish SBT plugin
          command: |
            if [ $CIRCLE_BRANCH = "master" ]; then
              cd ./plugins/sbt-specgen
              export VERSION=<< parameters.version >>
              sbt -Dversion=$VERSION publish
            else
              echo "Will not release - not running on master branch"
            fi
      - save_cache:
          key: cache-{{ checksum "./plugins/sbt-specgen/build.sbt" }}
          paths:
            - ~/.sbt
            - ~/.ivy2
            - ~/.m2

  build-sbt-specgen-sonatype:
    parameters:
      version:
        type: string
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/sbt-specgen/src/main/resources
      - restore_cache:
          key: cache-{{ checksum "./plugins/sbt-specgen/build.sbt" }}
      - setup-sonatype-sbt
      - run:
          name: Publish SBT plugin
          command: |
            cd ./plugins/sbt-specgen
            export VERSION=<< parameters.version >>
            sbt -Dversion=$VERSION publishSigned sonatypeRelease

  build-npm-specgen:
    parameters:
      version:
        type: string
    docker:
      - image: cimg/node:14.15.1
    steps:
      - checkout
      - attach_workspace:
          at: ./plugins/npm-specgen
      - run:
          name: npm publish package
          command: |
            cd ./plugins/npm-specgen
            npm version << parameters.version >>
            npm install
            npm publish

  trigger-tests:
    parameters:
      version:
        type: string
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - run:
          name: Trigger specgen-tests pipeline
          command: |
            curl -u ${CIRCLECI_TOKEN}: -X POST --header "Content-Type: application/json" \
            -d '{"parameters": {"specgen-version": "<< parameters.version >>"}}' \
            https://circleci.com/api/v2/project/github/ModaOperandi/specgen-tests/pipeline

commands:
  setup-artifactory-sbt:
    steps:
      - run:
          name: Setup Artifactory for SBT
          command: |
            mkdir -p ~/.sbt/1.0
            tee > ~/.sbt/1.0/artifactory.sbt \<<END
            credentials += Credentials("Artifactory Realm", "specgen.jfrog.io", "$JFROG_USER", "$JFROG_PASS")
            val artifactory = "Artifactory Realm" at "https://specgen.jfrog.io/artifactory/sbt"
            resolvers += artifactory
            publishTo := Some(artifactory)
            END
  setup-sonatype-sbt:
    steps:
      - run:
          name: Setup Sonatype for SBT
          command: |
            mkdir -p ~/.sbt/1.0
            tee > ~/.sbt/1.0/sonatype.sbt \<<END
            credentials += Credentials("Sonatype Nexus Repository Manager", "oss.sonatype.org", "$SONATYPE_USER", "$SONATYPE_PASSWORD")
            publishTo := Some(Opts.resolver.sonatypeStaging)
            pgpPassphrase := Some("$SONATYPE_GPG_PASSPHRASE".toArray)
            END
      - run:
          name: Add sontype plugins
          command: | 
            mkdir -p ~/.sbt/1.0/plugins
            tee > ~/.sbt/1.0/plugins/sonatype.sbt \<<END
            addSbtPlugin("org.xerial.sbt" % "sbt-sonatype" % "2.3")
            addSbtPlugin("com.jsuereth" % "sbt-pgp" % "1.1.1")
            END
      - run:
          name: Write PGP secret key
          command: |
            mkdir -p ~/.sbt/gpg
            (echo "$SONATYPE_GPG_SECRET_KEY" | base64 -d) > ~/.sbt/gpg/secring.asc
  setup-rubygems_key:
    steps:
      - run:
          name: Write key
          command: |
            mkdir ~/.gem
            tee > ~/.gem/credentials \<<END
            ---
            :rubygems_api_key: $RUBYGEMS_API_KEY
            END
            chmod 600 ~/.gem/credentials

workflows:
  build-release:
    jobs:
      - build-specgen:
          context: specgen
          <<: *common-params
      - build-gem-specgen:
          context: specgen
          <<: *common-params
          requires:
            - build-specgen
      - build-sbt-specgen:
          context: specgen
          <<: *common-params
          requires:
            - build-specgen
      - build-npm-specgen:
          context: specgen
          <<: *common-params
          requires:
            - build-specgen
      - tools/run-pipeline-workflow:
          name: tests
          repository: ModaOperandi/specgen-tests
          workflow-name: test
          pipeline-attempts: 30
          context: specgen
          pipeline-parameters: '{"specgen-version": "0.<< pipeline.number >>.0"}'
          requires:
            - build-gem-specgen
            - build-npm-specgen
            - build-sbt-specgen
          filters:
            branches:
              only: master
      - build-sbt-specgen-sonatype:
          context: specgen
          <<: *common-params
          requires:
            - tests
