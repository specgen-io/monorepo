// Generated by ego.
// DO NOT EDIT

//line gents/io-ts.ego:1
package gents

import
//line gents/io-ts.ego:2

//line gents/io-ts.ego:3
"fmt"
import "html"
import "io"
import "context"

//line gents/io-ts.ego:4

//line gents/io-ts.ego:5

//line gents/io-ts.ego:6

//line gents/io-ts.ego:7

//line gents/io-ts.ego:8
func generateIoTs(w io.Writer) {
//line gents/io-ts.ego:9

//line gents/io-ts.ego:10
	_, _ = io.WriteString(w, "export * from 'io-ts';\n\nimport * as t from 'io-ts';\n\n// Copy-paste from here: https://github.com/gcanti/io-ts/pull/366\n\nenum Enum {}\n/**\n * @since 2.3.0\n */\nexport class EnumType<E extends typeof Enum> extends t.Type<E[keyof E]> {\n  /**\n   * @since 2.3.0\n   */\n  readonly _tag: 'EnumType' = 'EnumType'\n  private readonly _enum: E\n  private readonly _enumValues: Set<string | number>\n  constructor(e: E, name?: string) {\n    super(\n      name || 'enum',\n      (u): u is E[keyof E] => {\n        if (!this._enumValues.has(u as any)) return false\n        // Don't allow key names from number enum reverse mapping\n        if (typeof (this._enum as any)[u as string] === 'number') return false\n        return true\n      },\n      (u, c) => (this.is(u) ? t.success(u) : t.failure(u, c)),\n      t.identity\n    )\n    this._enum = e\n    this._enumValues = new Set(Object.values(e))\n  }\n}\n\n/**\n * @since 2.3.0\n */\nconst enumType = <E extends typeof Enum>(e: E, name?: string) => new EnumType<E>(e, name);\n\nexport { enumType as enum }\n")
//line gents/io-ts.ego:50

//line gents/io-ts.ego:51
}

var _ fmt.Stringer
var _ io.Reader
var _ context.Context
var _ = html.EscapeString
