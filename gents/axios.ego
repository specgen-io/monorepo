<#    package gents
<#
<#    import (
<#        "io"
<#        "strings"
<#        "github.com/specgen-io/spec"
<#    )
<#
<#
<#    func generateClientApiClass(api spec.Api, w io.Writer) {

export const <%== api.Name.CamelCase() %>Client = (axiosInstance: AxiosInstance) => {
    return {
        axiosInstance,
<#        for _, operation := range api.Operations {
<#            generateOperation(&operation, w)
<#        }
    }
}
<#    }
<#
<#
<#    func generateOperation(operation *spec.NamedOperation, w io.Writer) {

        <%== operation.Name.CamelCase() %>: async (<%== createOperationParams(operation) %>): Promise<<%== responseTypeName(operation) %>> => {
<#          body := operation.Body
<#          hasQueryParams := len(operation.QueryParams) > 0
<#          hasHeaderParams := len(operation.HeaderParams) > 0
<#          if hasQueryParams {
            const params = {
<#              for _, p := range operation.QueryParams {
                "<%== p.Name.Source %>": <%== p.Name.CamelCase() %>,
<#              }
            }
<#          }
<#          if hasHeaderParams {
            const headers = {
<#              for _, p := range operation.HeaderParams {
                "<%== p.Name.Source %>": <%== p.Name.CamelCase() %>,
<#              }
            }
<#          }
            const config: AxiosRequestConfig = {<% if hasQueryParams { %>params: params,<% } %><% if hasHeaderParams { %>headers: headers,<% } %>}
<#              if body != nil {
            const bodyJson = encode(<%== IoTsType(&body.Type.Definition) %>, body)
<#              }
            const response = await axiosInstance.<%== strings.ToLower(operation.Endpoint.Method) %>(`<%== getUrl(operation.Endpoint) %>`,<% if body != nil { %> bodyJson,<% } %> config)
            switch (response.status) {
<#              for _, response := range operation.Responses {
                case <%= spec.HttpStatusCode(response.Name) %>:
                    return Promise.resolve({ status: "<%== response.Name.Source %>"<% if !response.Type.Definition.IsEmpty() { %>, data: decode(<%== IoTsType(&response.Type.Definition) %>, response.data)<% } %> })
<#              }
                default:
                    throw new Error(`Unexpected status code ${ response.status }`)
            }
        },
<#    }
<#
<#
<#    func generateClients(spec *spec.Spec, w io.Writer) {
import { AxiosInstance, AxiosRequestConfig } from 'axios';
import { decode, encode } from './codec'
import {
<#        for _, model := range spec.Models {
    <%== model.Name.PascalCase() %>,
    T<%== model.Name.PascalCase() %>,
<#        }
} from './models';
<#        for _, api := range spec.Apis {
<#            generateClientApiClass(api, w)
<#            for _, operation := range api.Operations {
<#                generateIoTsResponse(&operation, w)
<#            }
<#        }

export * from './models'
export { Errors } from 'io-ts'
export { DecodeError } from './codec'
<#    }