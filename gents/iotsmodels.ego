<#    package gents
<#
<#    import (
<#        "io"
<#        spec "github.com/specgen-io/spec.v1"
<#    )
<#
<#
<#    func generateIoTsObjectModel(model spec.NamedModel, w io.Writer) {
<#        hasRequiredFields, hasOptionalFields := kindOfFields(model)

<#        if hasRequiredFields && hasOptionalFields {
export const T<%== model.Name.PascalCase() %> = t.intersection([
  t.interface({
<#            for _, field := range model.Object.Fields {
<#                if !field.Type.Definition.IsNullable() {
    <%== field.Name.Source %>: <%== IoTsType(&field.Type.Definition) %>,
<#                }
<#            }
  }),
  t.partial({
<#            for _, field := range model.Object.Fields {
<#                if field.Type.Definition.IsNullable() {
    <%== field.Name.Source %>: <%== IoTsType(&field.Type.Definition) %>,
<#                }
<#            }
  })
])
<#        } else {
<#            var ioTsType = "t.interface"
<#            if hasOptionalFields {
<#                ioTsType = "t.partial"
<#            }
export const T<%== model.Name.PascalCase() %> = <%== ioTsType %>({
<#            for _, field := range model.Object.Fields {
  <%== field.Name.Source %>: <%== IoTsType(&field.Type.Definition) %>,
<#            }
})
<#        }

export type <%== model.Name.PascalCase() %> = t.TypeOf<typeof T<%== model.Name.PascalCase() %>>
<#    }
<#
<#
<#    func generateIoTsEnumModel(model spec.NamedModel, w io.Writer) {

export enum <%== model.Name.PascalCase() %> {
<#    	  for _, item := range model.Enum.Items {
  <%== item.Name.UpperCase() %> = "<%== item.Value %>",
<#        }
}

export const T<%== model.Name.PascalCase() %> = t.enum(<%== model.Name.PascalCase() %>)
<#    }
<#
<#
<#    func generateIoTsUnionModel(model spec.NamedModel, w io.Writer) {

export const T<%== model.Name.PascalCase() %> = t.union([
<#        for _, item := range model.OneOf.Items {
  t.interface({<%== item.Name.Source %>: <%== IoTsType(&item.Type.Definition) %>}),
<#        }
])

export type <%== model.Name.PascalCase() %> = t.TypeOf<typeof T<%== model.Name.PascalCase() %>>
<#    }
<#
<#
<#    func generateIoTsModels(spec *spec.Spec, w io.Writer) {
/* eslint-disable @typescript-eslint/camelcase */
/* eslint-disable @typescript-eslint/no-magic-numbers */
import * as t from './io-ts'
<#    	  for _, model := range spec.ResolvedModels {
<#    	  	  if model.IsObject() {
<#    			  generateIoTsObjectModel(model, w)
<#    		  } else if model.IsEnum() {
<#    			  generateIoTsEnumModel(model, w)
<#    		  } else if model.IsOneOf() {
<#    			  generateIoTsUnionModel(model, w)
<#    		  }
<#    	  }
<#    }
