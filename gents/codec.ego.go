// Generated by ego.
// DO NOT EDIT

//line gents/codec.ego:1
package gents

import
//line gents/codec.ego:2

//line gents/codec.ego:3
"fmt"
import "html"
import "io"
import "context"

//line gents/codec.ego:4

//line gents/codec.ego:5

//line gents/codec.ego:6

//line gents/codec.ego:7

//line gents/codec.ego:8
func generateCodec(w io.Writer) {
//line gents/codec.ego:9

//line gents/codec.ego:10
	_, _ = io.WriteString(w, "import { Errors, Type } from 'io-ts';\nimport { pipe } from 'fp-ts/lib/pipeable';\nimport { fold } from 'fp-ts/lib/Either';\nimport { identity } from 'fp-ts/lib/function';\n\nexport class DecodeError extends Error {\n    errors: Errors\n    constructor(errors: Errors) {\n        super('Decoding failed');\n        this.errors = errors;\n    }\n}\n\nexport const decode = <A, O, I>(codec: Type<A, O, I>, value: I): A => {\n    return pipe(\n        codec.decode(value),\n        fold(\n            errors => { throw new DecodeError(errors); },\n            identity\n        )\n    );\n};\n\nexport const encode = <A, O, I>(codec: Type<A, O, I>, value: A): O => {\n    return codec.encode(value);\n};\n")
//line gents/codec.ego:36

//line gents/codec.ego:37
}

var _ fmt.Stringer
var _ io.Reader
var _ context.Context
var _ = html.EscapeString
