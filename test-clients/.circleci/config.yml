version: 2.1

orbs:
  artifactory: specgen/artifactory@0.5.0

parameters:
  specgen-version:
    type: string
    default: 2.1.2198

  specgen-version-major:
    type: string
    default: v2

jobs:
  test-service:
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/go:1.18.3
    steps:
      - checkout
      - run:
          name: Build test-service
          command: |
            cd ./test-service
            go install github.com/specgen-io/specgen-golang/<<pipeline.parameters.specgen-version-major>>@v<< pipeline.parameters.specgen-version >>-alpha
            go generate
            go build -o test-service
      - persist_to_workspace:
          root: .
          paths:
            - test-service

  go:
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/go:1.18.3
    steps:
      - checkout
      - attach_workspace:
          at: .
      - start-service:
          port: 8081
      - run:
          name: Test Go client
          command: |
            cd ./go
            go install github.com/specgen-io/specgen-golang/<<pipeline.parameters.specgen-version-major>>@v<< pipeline.parameters.specgen-version >>-alpha
            go generate
            mkdir -p ./test-results
            go install github.com/jstemmer/go-junit-report@v0.9.1
            go test ./... -v 2>&1 | go-junit-report > ./test-results/go-test-report.xml
            go test ./... -v
      - store_test_results:
          path: ./go/test-results

  java-okhttp-jackson:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./java-okhttp-jackson/pom.xml" }}
      - artifactory/setup-maven:
          jfrog-server-url: specgen.jfrog.io
          repo-name: maven
      - start-service:
          port: 8081
      - run:
          name: Test Java OkHttp client
          command: |
            cd ./java-okhttp-jackson
            mkdir -p ./test-results
            mvn clean test -Dspecgen.version=<<pipeline.parameters.specgen-version>>
      - store_test_results:
          path: ./java-okhttp-jackson/test-results
      - save_cache:
          key: cache-{{ checksum "./java-okhttp-jackson/pom.xml" }}
          paths:
            - ~/.m2

  java-okhttp-moshi:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./java-okhttp-moshi/pom.xml" }}
      - artifactory/setup-maven:
          jfrog-server-url: specgen.jfrog.io
          repo-name: maven
      - start-service:
          port: 8081
      - run:
          name: Test Java OkHttp client
          command: |
            cd ./java-okhttp-moshi
            mkdir -p ./test-results
            mvn clean test -Dspecgen.version=<<pipeline.parameters.specgen-version>>
      - store_test_results:
          path: ./java-okhttp-moshi/test-results
      - save_cache:
          key: cache-{{ checksum "./java-okhttp-moshi/pom.xml" }}
          paths:
            - ~/.m2

  java-micronaut-jackson:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./java-micronaut-jackson/pom.xml" }}
      - artifactory/setup-maven:
          jfrog-server-url: specgen.jfrog.io
          repo-name: maven
      - start-service:
          port: 8081
      - run:
          name: Test Java Micronaut client
          command: |
            cd ./java-micronaut-jackson
            mkdir -p ./test-results
            mvn clean test -Dspecgen.version=<<pipeline.parameters.specgen-version>>
      - store_test_results:
          path: ./java-micronaut-jackson/test-results
      - save_cache:
          key: cache-{{ checksum "./java-micronaut-jackson/pom.xml" }}
          paths:
            - ~/.m2               

  kotlin-okhttp-jackson:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: cache-{{ checksum "./kotlin-okhttp-jackson/build.gradle.kts" }}-{{ checksum "./kotlin-okhttp-jackson/settings.gradle.kts" }}
      - start-service:
          port: 8081
      - run:
          name: Test Kotlin OkHttp client
          command: |
            cd ./kotlin-okhttp-jackson
            ./gradlew --build-cache --no-daemon --stacktrace test \
            -Djfrog.user=$JFROG_USER \
            -Djfrog.pass=$JFROG_PASS \
            -Dspecgen.version=<<pipeline.parameters.specgen-version>>
      - store_test_results:
          path: ./kotlin-okhttp-jackson/build/test-results
      - save_cache:
          key: cache-{{ checksum "./kotlin-okhttp-jackson/build.gradle.kts" }}-{{ checksum "./kotlin-okhttp-jackson/settings.gradle.kts" }}
          paths: [ ~/.gradle ]  

  kotlin-okhttp-moshi:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: cache-{{ checksum "./kotlin-okhttp-moshi/build.gradle.kts" }}-{{ checksum "./kotlin-okhttp-moshi/settings.gradle.kts" }}
      - start-service:
          port: 8081
      - run:
          name: Test Kotlin OkHttp client
          command: |
            cd ./kotlin-okhttp-moshi
            ./gradlew --build-cache --no-daemon --stacktrace test \
            -Djfrog.user=$JFROG_USER \
            -Djfrog.pass=$JFROG_PASS \
            -Dspecgen.version=<<pipeline.parameters.specgen-version>>
      - store_test_results:
          path: ./kotlin-okhttp-moshi/build/test-results
      - save_cache:
          key: cache-{{ checksum "./kotlin-okhttp-moshi/build.gradle.kts" }}-{{ checksum "./kotlin-okhttp-moshi/settings.gradle.kts" }}
          paths: [ ~/.gradle ]    

  kotlin-micronaut-jackson:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:11-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          key: cache-{{ checksum "./kotlin-micronaut-jackson/build.gradle.kts" }}-{{ checksum "./kotlin-micronaut-jackson/settings.gradle.kts" }}
      - start-service:
          port: 8081
      - run:
          name: Test Kotlin Micronaut client
          command: |
            cd ./kotlin-micronaut-jackson
            ./gradlew --build-cache --no-daemon --stacktrace test \
            -Djfrog.user=$JFROG_USER \
            -Djfrog.pass=$JFROG_PASS \
            -Dspecgen.version=<<pipeline.parameters.specgen-version>>
      - store_test_results:
          path: ./kotlin-micronaut-jackson/build/test-results
      - save_cache:
          key: cache-{{ checksum "./kotlin-micronaut-jackson/build.gradle.kts" }}-{{ checksum "./kotlin-micronaut-jackson/settings.gradle.kts" }}
          paths: [ ~/.gradle ]                          

  ruby:
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/ruby:2.4.9
    steps:
      - checkout
      - attach_workspace:
          at: .
      - artifactory/setup-bundler:
          jfrog-server-url: specgen.jfrog.io
      - start-service:
          port: 8081
      - run:
          name: Setup Gemfile
          command: |
            cd ./ruby
            tee --append ./Gemfile \<<END

            source 'https://specgen.jfrog.io/artifactory/api/gems/gems/' do
              gem 'specgen', '<< pipeline.parameters.specgen-version >>'
            end
            END
      - restore_cache:
          keys:
            - cache-{{ checksum "./ruby/Gemfile.lock" }}
      - run:
          name: Test Ruby client
          command: |
            cd ./ruby
            bundle install
            export SERVICE_URL=http://localhost:8081
            rake
      - save_cache:
          key: cache-{{ checksum "./ruby/Gemfile.lock" }}
          paths:
            - ~/specgen-tests/ruby/vendor/bundle            
      - store_test_results:
          path: ./ruby/test-results

  scala-sttp:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - cache-{{ checksum "./scala-sttp/build.sbt" }}
      - artifactory/setup-sbt:
          jfrog-server-url: specgen.jfrog.io
          repo-name: sbt
      - start-service:
          port: 8081
      - run:
          name: Test Scala sttp client
          command: |
            cd ./scala-sttp
            export SERVICE_URL=http://localhost:8081
            mkdir -p ./test-results
            sbt -Djunitxml=./test-results test < /dev/null
      - store_test_results:
          path: ./scala-sttp/test-results
      - save_cache:
          key: cache-{{ checksum "./scala-sttp/build.sbt" }}
          paths:
            - ~/.sbt
            - ~/.ivy2

  ts-axios-superstruct:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/node:16.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - start-service:
          port: 8081
      - artifactory/setup-npm:
          jfrog-server-url: specgen.jfrog.io
          repo-name: npm
          scope: specgen.io
      - run:
          name: Setup npm
          command: |
            cd ./ts-axios-superstruct
            npm install @specgen.io/specgen.io@$SPECGEN_VERSION --save-dev
      - restore_cache:
          keys:
            - cache-{{ checksum "./ts-axios-superstruct/package.json" }}
      - run:
          name: Test axios client
          command: |
            cd ./ts-axios-superstruct
            npm install
            npm run specgen
            export SERVICE_URL=http://localhost:8081
            mkdir -p ./test-results
            export JEST_JUNIT_OUTPUT_DIR=./test-results
            npm run test
      - save_cache:
          key: cache-{{ checksum "./ts-axios-superstruct/package.json" }}
          paths:
            - ~/specgen-tests/ts-axios-superstruct/node_modules            
      - store_test_results:
          path: ./ts-axios-superstruct/test-results

  ts-node-fetch-superstruct:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/node:16.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - start-service:
          port: 8081
      - artifactory/setup-npm:
          jfrog-server-url: specgen.jfrog.io
          repo-name: npm
          scope: specgen.io
      - run:
          name: Setup npm
          command: |
            cd ./ts-node-fetch-superstruct
            npm install @specgen.io/specgen.io@$SPECGEN_VERSION --save-dev
      - restore_cache:
          keys:
            - cache-{{ checksum "./ts-node-fetch-superstruct/package.json" }}
      - run:
          name: Test fetch client
          command: |
            cd ./ts-node-fetch-superstruct
            npm install
            npm run specgen
            export SERVICE_URL=http://localhost:8081
            mkdir -p ./test-results
            export JEST_JUNIT_OUTPUT_DIR=./test-results
            npm run test
      - save_cache:
          key: cache-{{ checksum "./ts-node-fetch-superstruct/package.json" }}
          paths:
            - ~/specgen-tests/ts-node-fetch-superstruct/node_modules            
      - store_test_results:
          path: ./ts-node-fetch-superstruct/test-results

  ts-browser-fetch-superstruct:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/node:16.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - start-service:
          port: 8081
      - artifactory/setup-npm:
          jfrog-server-url: specgen.jfrog.io
          repo-name: npm
          scope: specgen.io
      - run:
          name: Setup npm
          command: |
            cd ./ts-browser-fetch-superstruct
            npm install @specgen.io/specgen.io@$SPECGEN_VERSION --save-dev
      - restore_cache:
          keys:
            - cache-{{ checksum "./ts-browser-fetch-superstruct/package.json" }}
      - run:
          name: Build code
          command: |
            cd ./ts-browser-fetch-superstruct
            npm install
            npm run specgen
            npm run build
      - run:
          name: Run browser
          command: |
            cd ./ts-browser-fetch-superstruct
            npm run start
          background: true
      - wait-url:
          url: http://localhost:8082/
      - run:
          name: Test fetch client
          command: |
            cd ./ts-browser-fetch-superstruct
            export SERVICE_URL=http://localhost:8081
            npm run test
      - save_cache:
          key: cache-{{ checksum "./ts-browser-fetch-superstruct/package.json" }}
          paths:
            - ~/specgen-tests/ts-browser-fetch-superstruct/node_modules            

  ts-axios-iots:
    environment:
      SPECGEN_VERSION: << pipeline.parameters.specgen-version >>
    working_directory: ~/specgen-tests
    docker:
      - image: cimg/node:16.8.0
    steps:
      - checkout
      - attach_workspace:
          at: .
      - start-service:
          port: 8081
      - artifactory/setup-npm:
          jfrog-server-url: specgen.jfrog.io
          repo-name: npm
          scope: specgen.io
      - run:
          name: Setup npm
          command: |
            cd ./ts-axios-iots
            npm install @specgen.io/specgen.io@$SPECGEN_VERSION --save-dev
      - restore_cache:
          keys:
            - cache-{{ checksum "./ts-axios-iots/package.json" }}
      - run:
          name: Test axios client
          command: |
            cd ./ts-axios-iots
            npm install
            npm run specgen
            export SERVICE_URL=http://localhost:8081
            mkdir -p ./test-results
            export JEST_JUNIT_OUTPUT_DIR=./test-results
            npm run test
      - save_cache:
          key: cache-{{ checksum "./ts-axios-iots/package.json" }}
          paths:
            - ~/specgen-tests/ts-axios-iots/node_modules            
      - store_test_results:
          path: ./ts-axios-iots/test-results

commands:
  start-service:
    parameters:
      port:
        type: integer
    steps:
      - run:
          name: Start test-service
          command: ./test-service/test-service --port << parameters.port >>
          background: true
      - wait-url:
          url: http://localhost:<< parameters.port >>/

  wait-url:
    parameters:
      url:
        type: string
      sleep:
        type: integer
        default: 5
      attempts:
        type: integer
        default: 12
    steps:
      - run:
          name: Wait until url is available
          command: |
            attempt_counter=0
            max_attempts=<< parameters.attempts >>

            until $(curl --output /dev/null --silent --head --fail << parameters.url >>); do
              if [ ${attempt_counter} -eq ${max_attempts} ];then
                echo "Max attempts reached"
                exit 1
              fi

              printf '.'
              attempt_counter=$(($attempt_counter+1))
              sleep << parameters.sleep >>
            done

workflows:
  build-test:
    jobs:
      - test-service:
          context: specgen
      - go:
          context: specgen
          requires:
            - test-service
      - java-okhttp-jackson:
          context: specgen
          requires:
            - test-service
      - java-okhttp-moshi:
          context: specgen
          requires:
            - test-service
      - java-micronaut-jackson:
          context: specgen
          requires:
            - test-service        
      - kotlin-okhttp-jackson:
          context: specgen
          requires:
            - test-service    
      - kotlin-okhttp-moshi:
          context: specgen
          requires:
            - test-service   
      - kotlin-micronaut-jackson:
          context: specgen
          requires:
            - test-service                     
      - ruby:
          context: specgen
          requires:
            - test-service
      - scala-sttp:
          context: specgen
          requires:
            - test-service
      - ts-axios-superstruct:
          context: specgen
          requires:
            - test-service
      - ts-node-fetch-superstruct:
          context: specgen
          requires:
            - test-service
      - ts-browser-fetch-superstruct:
          context: specgen
          requires:
            - test-service
      - ts-axios-iots:
          context: specgen
          requires:
            - test-service
