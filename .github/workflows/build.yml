name: build

on: [push]

jobs:
  golang:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - name: Build golang codegen
        run: |
          cd codegen/golang
          go build

  models-golang:
    needs: golang
    strategy:
      matrix:
        values-file: [strict, nonstrict]
    runs-on: ubuntu-latest
    env:
      RENDR_PATH: ./
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with:
          jfrog_pass: ${{ secrets.JFROG_PASS }}
          version: ${RENDR_TOOL_VERSION}
      - name: Render project
        run: ./rendr_test.sh models go ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  service-tests-golang:
    needs: golang
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - name: Build tests
        run: |
          cd test-services/tests
          go test -c -o service-tests
      - uses: actions/upload-artifact@v3
        with:
          name: service-tests
          path: test-services/tests

#  service-tests:
#    docker:
#      - image: cimg/go:1.18.3
#    working_directory: ~/specgen-tests
#    steps:
#      - checkout
#      - run:
#          name: Build tests
#          command: |
#            cd test-services/tests
#            go test -c -o service-tests
#      - persist_to_workspace:
#          root: .
#          paths:
#            - test-services/tests
