name: build

on: [push]

jobs:
  check-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - name: Print version vars
        run: |
          echo "SPECGEN_VERSION_MAJOR: ${SPECGEN_VERSION_MAJOR}"
          echo "SPECGEN_VERSION: ${SPECGEN_VERSION}"

  golang:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - name: Build golang codegen
        run: |
          cd codegen/golang
          go build

  service-tests:
    needs: golang
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - name: Build tests
        run: |
          cd test-services/tests
          go test -c -o service-tests
      - uses: actions/upload-artifact@v3
        with:
          name: service-tests
          path: test-services/tests

  client-test-service:
    needs: golang
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with:
          jfrog_pass: ${{ secrets.JFROG_PASS }}
          version: ${RENDR_TOOL_VERSION}
      - name: Render project
        run: ./rendr file:///./templates/service-go --root file:///./test-clients/test-service/template --noinput --set versions.specgen=${SPECGEN_VERSION} --out ./test-service
      - name: Copy spec.yaml
        run: cp ./test-clients/spec.yaml ./test-service/spec.yaml
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./test-service
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: actions/upload-artifact@v3
        with:
          name: client-test-service
          path: ./test-service

  golang-models:
    needs: golang
    strategy:
      matrix:
        values-file: [strict, nonstrict]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with:
          jfrog_pass: ${{ secrets.JFROG_PASS }}
          version: ${RENDR_TOOL_VERSION}
      - name: Render project
        run: ./rendr_test.sh models go ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  golang-service:
    needs: service-tests
    strategy:
      matrix:
        values-file: [vestigo-strict, chi-strict, httprouter-strict]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with:
          jfrog_pass: ${{ secrets.JFROG_PASS }}
          version: ${RENDR_TOOL_VERSION}
      - name: Render project
        run: ./rendr_test.sh service go ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - name: Start service
        run: |
          cd ./out
          $(yq eval .run .rendr.yaml) &
      - uses: ./.github/actions/wait-url
        with:
          url: http://localhost:8081/docs/
      - uses: actions/download-artifact@v3
        with:
          name: service-tests
      - name: Run tests
        run: |
          chmod +x ./service-tests
          ./service-tests -test.v

  golang-client:
    needs: client-test-service
    strategy:
      matrix:
        values-file: [strict, nonstrict]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with:
          jfrog_pass: ${{ secrets.JFROG_PASS }}
          version: ${RENDR_TOOL_VERSION}
      - name: Render project
        run: ./rendr_test.sh client go ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/start-test-service
        with:
          port: "8081"
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  java:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/build-specgen-plugin
        with: { plugin-path: codegen/java, specgen-version: "${SPECGEN_VERSION}", artifact-name: specgen-java }

  java-maven:
    needs: java
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: actions/download-artifact@v3
        with: { name: specgen-java, path: ./plugins/maven-java-specgen/src/main/resources }
      - name: Debug files
        run: |
          echo "Directory ."
          ls -la .
          echo "Directory ./plugins/maven-java-specgen/src/main/resources"
          ls -la ./plugins/maven-java-specgen/src/main/resources
      - name: Build Maven plugin
        run: |
          cd ./plugins/maven-java-specgen
          sed -i.bak 's/PROJECT_VERSION/${SPECGEN_VERSION}/g' pom.xml
          mvn clean install --no-transfer-progress


#  maven-java:
#    docker:
#      - image: cimg/openjdk:11.0.20
#    steps:
#      - checkout
#      - attach_workspace_folder:
#          folder: codegen/java
#          at: ./plugins/maven-java-specgen/src/main/resources
#      - restore_cache:
#          key: cache-{{ checksum "./plugins/maven-java-specgen/pom.xml" }}
#      - artifactory/setup-maven:
#          jfrog-server-url: specgen.jfrog.io
#          repo-name: maven
#      - run:
#          name: Build Maven plugin
#          command: |
#            cd ./plugins/maven-java-specgen
#            sed -i.bak 's/PROJECT_VERSION/<<pipeline.parameters.specgen-version>>/g' pom.xml
#            mvn clean install
#      - run:
#          name: Deploy Maven plugin
#          command: |
#            cd ./plugins/maven-java-specgen
#            mvn deploy -Dartifactory=true
#      - save_cache:
#          key: cache-{{ checksum "./plugins/maven-java-specgen/pom.xml" }}
#          paths:
#            - ~/.ivy2
#            - ~/.m2
