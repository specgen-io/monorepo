name: build

on: [push]

jobs:
  golang:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - name: Build golang codegen
        run: |
          cd codegen/golang
          go build

  service-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - name: Build tests
        run: |
          cd test-services/tests
          go test -c -o service-tests
      - uses: actions/upload-artifact@v3
        with:
          name: service-tests
          path: test-services/tests

  client-test-service:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr file:///./templates/service-go --root file:///./test-clients/test-service/template --noinput --set versions.specgen=${SPECGEN_VERSION} --out ./test-service
      - name: Copy spec.yaml
        run: cp ./test-clients/spec.yaml ./test-service/spec.yaml
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./test-service
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: actions/upload-artifact@v3
        with:
          name: client-test-service
          path: ./test-service

  golang-models:
    needs: golang
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [strict, nonstrict]
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh models go ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  golang-service:
    needs: [golang, service-tests]
    strategy:
      matrix:
        values-file: [vestigo-strict, chi-strict, httprouter-strict]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh service go ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - name: Start service
        run: |
          cd ./out
          $(yq eval .run .rendr.yaml) &
      - uses: ./.github/actions/wait-url
        with:
          url: http://localhost:8081/docs/
      - uses: actions/download-artifact@v3
        with:
          name: service-tests
      - name: Run tests
        run: |
          chmod +x ./service-tests
          ./service-tests -test.v

  golang-client:
    needs: [golang, client-test-service]
    strategy:
      matrix:
        values-file: [strict, nonstrict]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with: { go-version: '1.18' }
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/install-specgen-golang
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh client go ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/start-test-service
        with:
          port: "8081"
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  java:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/build-specgen-plugin
        with: { plugin-path: codegen/java, specgen-version: "${SPECGEN_VERSION}", artifact-name: specgen-java }

  java-maven:
    needs: java
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: actions/download-artifact@v3
        with: { name: specgen-java, path: ./plugins/maven-java-specgen/src/main/resources/dist }
      - uses: ./.github/actions/artifactory-setup-maven
        with: { jfrog-server-url: specgen.jfrog.io, repo-name: maven, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - name: Build Maven plugin
        run: |
          cd ./plugins/maven-java-specgen
          sed -i.bak "s/PROJECT_VERSION/${SPECGEN_VERSION}/g" pom.xml
          mvn clean install --no-transfer-progress
      - name: Deploy Maven plugin
        run: |
          cd ./plugins/maven-java-specgen
          mvn deploy -Dartifactory=true --no-transfer-progress

  java-gradle:
    needs: java
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: actions/download-artifact@v3
        with: { name: specgen-java, path: ./plugins/gradle-java-specgen/src/main/resources/dist }
      - name: Build Gradle plugin
        run: |
          cd ./plugins/gradle-java-specgen
          ./gradlew build --build-cache --no-daemon -Pproject.version=${SPECGEN_VERSION}
      - name: Deploy Gradle plugin
        run: |
          cd ./plugins/gradle-java-specgen
          ./gradlew publishAllPublicationsToArtifactoryRepository --build-cache --no-daemon \
          -Djfrog.user=${{ secrets.JFROG_USER }} \
          -Djfrog.pass=${{ secrets.JFROG_PASS }} \
          -Dproject.version=${SPECGEN_VERSION}

  java-build:
    needs: [java-maven, java-gradle]
    runs-on: ubuntu-latest
    steps: [ run: "echo 'Just a placeholder'" ]

  java-models:
    needs: java-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [jackson, moshi]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh models java ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-maven
        with: { jfrog-server-url: specgen.jfrog.io, repo-name: maven, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  java-service:
    needs: [java-build, service-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [micronaut-jackson, micronaut-moshi, spring-jackson, spring-moshi]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh service java ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-maven
        with: { jfrog-server-url: specgen.jfrog.io, repo-name: maven, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - name: Start service
        run: |
          cd ./out
          $(yq eval .run .rendr.yaml) &
      - uses: ./.github/actions/wait-url
        with:
          url: http://localhost:8081/swagger-ui/
      - uses: actions/download-artifact@v3
        with:
          name: service-tests
      - name: Run tests
        run: |
          chmod +x ./service-tests
          ./service-tests -test.v

  java-client:
    needs: [java-build, client-test-service]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [micronaut-jackson, micronaut-moshi, okhttp-jackson, okhttp-moshi]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh client java ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-maven
        with: { jfrog-server-url: specgen.jfrog.io, repo-name: maven, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/start-test-service
        with:
          port: "8081"
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  kotlin:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/build-specgen-plugin
        with: { plugin-path: codegen/kotlin, specgen-version: "${SPECGEN_VERSION}", artifact-name: specgen-kotlin }

  kotlin-maven:
    needs: kotlin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: actions/download-artifact@v3
        with: { name: specgen-kotlin, path: ./plugins/maven-kotlin-specgen/src/main/resources/dist }
      - uses: ./.github/actions/artifactory-setup-maven
        with: { jfrog-server-url: specgen.jfrog.io, repo-name: maven, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - name: Build Maven plugin
        run: |
          cd ./plugins/maven-kotlin-specgen
          sed -i.bak "s/PROJECT_VERSION/${SPECGEN_VERSION}/g" pom.xml
          mvn clean install --no-transfer-progress
      - name: Deploy Maven plugin
        run: |
          cd ./plugins/maven-kotlin-specgen
          mvn deploy -Dartifactory=true --no-transfer-progress

  kotlin-gradle:
    needs: kotlin
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: actions/download-artifact@v3
        with: { name: specgen-kotlin, path: ./plugins/gradle-kotlin-specgen/src/main/resources/dist }
      - name: Build Gradle plugin
        run: |
          cd ./plugins/gradle-kotlin-specgen
          ./gradlew build --build-cache --no-daemon -Pproject.version=${SPECGEN_VERSION}
      - name: Deploy Gradle plugin
        run: |
          cd ./plugins/gradle-kotlin-specgen
          ./gradlew publishAllPublicationsToArtifactoryRepository --build-cache --no-daemon \
          -Djfrog.user=${{ secrets.JFROG_USER }} \
          -Djfrog.pass=${{ secrets.JFROG_PASS }} \
          -Dproject.version=${SPECGEN_VERSION}

  kotlin-build:
    needs: [kotlin-maven, kotlin-gradle]
    runs-on: ubuntu-latest
    steps: [ run: "echo 'Just a placeholder'" ]

  kotlin-models:
    needs: java-build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [jackson, moshi]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh models kotlin ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-gradle-kotlin
        with: { project-path: ./out, jfrog-server-url: specgen.jfrog.io, repo-name: maven, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  kotlin-service:
    needs: [kotlin-build, service-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [micronaut-jackson, micronaut-moshi, spring-jackson, spring-moshi]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh service kotlin ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-gradle-kotlin
        with: { project-path: ./out, jfrog-server-url: specgen.jfrog.io, repo-name: maven, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - name: Start service
        run: |
          cd ./out
          $(yq eval .run .rendr.yaml) &
      - uses: ./.github/actions/wait-url
        with:
          url: http://localhost:8081/swagger-ui/
      - uses: actions/download-artifact@v3
        with:
          name: service-tests
      - name: Run tests
        run: |
          chmod +x ./service-tests
          ./service-tests -test.v

  kotlin-client:
    needs: [kotlin-build, client-test-service]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [micronaut-jackson, micronaut-moshi, okhttp-jackson, okhttp-moshi]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-java@v3
        with: { distribution: 'corretto', java-version: '11' }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh client kotlin ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-gradle-kotlin
        with: { project-path: ./out, jfrog-server-url: specgen.jfrog.io, repo-name: maven, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/start-test-service
        with:
          port: "8081"
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  typescript:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/build-specgen-plugin
        with: { plugin-path: codegen/typescript, specgen-version: "${SPECGEN_VERSION}", artifact-name: specgen-typescript }

  typescript-npm:
    needs: typescript
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/set-version-vars
      - uses: actions/setup-node@v3
        with: { node-version: 16 }
      - uses: actions/download-artifact@v3
        with: { name: specgen-typescript, path: ./plugins/npm-specgen/dist }
      - uses: ./.github/actions/artifactory-setup-npm
        with: { jfrog-server-url: specgen.jfrog.io, repo-name: npm, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - name: Deploy npm plugin
        run: |
          cd ./plugins/npm-specgen
          npm pkg set name=@specgen.io/specgen.io
          npm version ${SPECGEN_VERSION}
          npm install
          npm publish

  typescript-models:
    needs: typescript-npm
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [superstruct, iots]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 16 }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh models ts ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-npm
        with: { scope: specgen.io, jfrog-server-url: specgen.jfrog.io, repo-name: npm, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test

  typescript-service:
    needs: [typescript-npm, service-tests]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [express-superstruct, express-iots, koa-superstruct, koa-iots]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 16 }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh service ts ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-npm
        with: { scope: specgen.io, jfrog-server-url: specgen.jfrog.io, repo-name: npm, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - name: Start service
        run: |
          cd ./out
          $(yq eval .run .rendr.yaml) &
      - uses: ./.github/actions/wait-url
        with:
          url: http://localhost:8081/docs/
      - uses: actions/download-artifact@v3
        with:
          name: service-tests
      - name: Run tests
        run: |
          chmod +x ./service-tests
          ./service-tests -test.v

  typescript-client:
    needs: [typescript-npm, client-test-service]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        values-file: [axios-superstruct, axios-iots, node-fetch-superstruct]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with: { node-version: 16 }
      - uses: ./.github/actions/set-env-vars
      - uses: ./.github/actions/set-version-vars
      - uses: ./.github/actions/get-rendr
        with: { jfrog-pass: "${{ secrets.JFROG_PASS }}", version: "${RENDR_TOOL_VERSION}" }
      - name: Render project
        run: ./rendr_test.sh client ts ${{ matrix.values-file }} ${SPECGEN_VERSION} ./out
      - uses: ./.github/actions/artifactory-setup-npm
        with: { scope: specgen.io, jfrog-server-url: specgen.jfrog.io, repo-name: npm, jfrog-user: "${{ secrets.JFROG_USER }}", jfrog-pass: "${{ secrets.JFROG_PASS }}" }
      - uses: ./.github/actions/start-test-service
        with:
          port: "8081"
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .setup
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .build
      - uses: ./.github/actions/yaml-execute
        with:
          path: ./out
          yaml-file: .rendr.yaml
          yaml-path: .test
